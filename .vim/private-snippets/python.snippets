
priority -50

################################################################################
#                                   Licences                                   #
################################################################################

# see
# http://web.archive.org/web/20110818210631/http://jaynes.colorado.edu/PythonGuidelines.html#module_formatting
snippet pandora "license for pandora code" b
# Software License Agreement
__version__ = "0.0.1"
__status__ = "Development"
__license__ = "BSD"
__copyright__ = "Copyright (c) 2015, P.A.N.D.O.R.A. Team. All rights reserved."
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of P.A.N.D.O.R.A. Team nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
__authors__ = "${1:Tsirigotis Christos}"
__maintainer__ = "${2:Tsirigotis Christos}"
__email__ = "${3:tsirif@gmail.com}"

${0}
endsnippet

snippet codejam "template for google programming contests" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Submission for problem ${1:A}: ${2:Rank And File}
of Google CodeJam ${3:2017}

Author: Christos Tsirigotis <tsirif@gmail.com>
Date: `!p import time; snip.rv += time.strftime("%B %d, %Y")`
"""


from __future__ import absolute_import, print_function, division
import itertools as itools
from itertools import compress as cmpr
from itertools import product as prd
from itertools import permutations as perm
from itertools import combinations as comb
from itertools import combinations_with_replacement as combr
from fractions import gcd
from collections import defaultdict as dd
from collections import deque as dq
import numpy as np
from numpy import pi
bc = lambda n: bc((n - 1) & n) + 1 if n else 0
MOD = 1000002013
EPS = 1e-8

OUTCASE = "Case #%(nc)s:"
outlist = lambda x, y: print(x + ' ' + ' '.join(map(str, y)))
outnum = lambda x, y: print(x + ' ' + str(y))


def out(nc, solution):
    outcase = OUTCASE % locals()
    try:
        float(solution)
        outnum(outcase, solution)
    except TypeError:
        outlist(outcase, solution)


def solve():
    T = int(input())  # get number of test cases
    for nc in range(1, T + 1):
        # input
        A = list(map(int, input().split()))  # get list of numbers
        A = int(raw_input())  # get a number
        # TODO things
        # ...
        # output
        B = []  # B is a list of numbers
        B = 0  # B is a number
        # print
        out(nc, B)

solve()
endsnippet

snippet xtreme "template for ieee programming contests" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Submission for problem ${1:A}
of IEEEXtreme${3:-10.0 2016}

Author: ${4:NinjaSolutions}
Date: `!p import time; snip.rv += time.strftime("%B %d, %Y")`
"""


from __future__ import absolute_import, print_function, division
import itertools as itools
from itertools import compress as cmpr
from itertools import product as prd
from itertools import permutations as perm
from itertools import combinations as comb
from itertools import combinations_with_replacement as combr
from fractions import gcd
from collections import defaultdict as dd
from collections import deque as dq
bc = lambda n: bc((n - 1) & n) + 1 if n else 0  # bitcount
MOD = 1000002013  # large prime number
EPS = 1e-8


def out(solution):
    try:
        float(solution)
        print(str(solution))
    except TypeError:
				print(' '.join(map(str, solution)))


def solve():
    T = int(input())  # get number of test cases
    for nc in range(1, T + 1):
        # input
        A = list(map(int, input().split()))  # get list of numbers
        A = int(input())  # get a number
        # TODO things
        # ...
        # output
        B = []  # B is a list of numbers
        B = 0  # B is a number
        # print
        out(B)

solve()
endsnippet

# outlist
# outnum
# inlist
# innum
# fori
# DFS
# BFS
